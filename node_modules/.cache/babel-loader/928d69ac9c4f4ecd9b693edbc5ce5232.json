{"ast":null,"code":"const bubbleSort = function (ary) {\n  var history = [];\n  var operations = [];\n\n  for (var i = 0; i < ary.length; i++) {\n    for (var j = 0; j < ary.length - i - 1; j++) {\n      if (ary[j] > ary[j + 1]) {\n        var tmp = ary[j + 1];\n        ary[j + 1] = ary[j];\n        ary[j] = tmp;\n        history = history.concat([ary.slice()]);\n        operations = operations.concat([[j, j + 1]]);\n      }\n    }\n  }\n\n  return [history, operations];\n};\n\nconst selectionSort = ary => {\n  var history = [];\n  var operations = [];\n  var max_ = -1;\n  var max_idnex = -1;\n\n  for (var i = 0; i < ary.length; i++) {\n    max_ = -1;\n\n    for (var j = 0; j < ary.length - i; j++) {\n      if (ary[j] > max_) {\n        max_ = ary[j];\n        max_idnex = j;\n      }\n    }\n\n    var tmp = ary[ary.length - i - 1];\n    ary[ary.length - i - 1] = max_;\n    ary[max_idnex] = tmp;\n    history = history.concat([ary.slice()]);\n    operations = operations.concat([[max_idnex, ary.length - i - 1]]);\n  }\n\n  return [history, operations];\n};\n\nconst insertionSort = ary => {\n  var history = [];\n  var operations = [];\n  var index = -1;\n\n  for (var i = 0; i < ary.length; i++) {\n    index = i;\n    var tmp = ary[i];\n\n    for (var j = 0; j < i; j++) {\n      if (ary[j] > ary[i]) {\n        index = j;\n        break;\n      }\n    }\n\n    for (var k = i; k > index; k--) {\n      ary[k] = ary[k - 1];\n      history = history.concat([ary.slice()]);\n      operations = operations.concat([[k, i - 1]]);\n    }\n\n    ary[index] = tmp;\n    history = history.concat([ary.slice()]);\n    operations = operations.concat([[index, i]]);\n  }\n\n  return [history, operations];\n};\n\nconst quickSort = ary => {\n  var stack = [];\n  var history = [];\n  var operations = [];\n  var start = 0,\n      end = ary.length - 1;\n  stack.push([start, end]);\n\n  while (stack.length > 0) {\n    [start, end] = stack.pop();\n    var [pivot_index, history_, operations_] = partition(ary, start, end);\n    history = history.concat(history_);\n    operations = operations.concat(operations_);\n\n    if (pivot_index - 1 > start) {\n      stack.push([start, pivot_index - 1]);\n    }\n\n    if (pivot_index + 1 < end) {\n      stack.push([pivot_index + 1, end]);\n    }\n  }\n\n  return [history, operations];\n};\n\nconst swap = (A, a, b) => {\n  var tmp = A[a];\n  A[a] = A[b];\n  A[b] = tmp;\n};\n\nconst partition = (input, start, end) => {\n  var pivot = input[end];\n  var pivot_index = start;\n  var history = [];\n  var operations = [];\n\n  for (var i = start; i < end; i++) {\n    if (input[i] <= pivot) {\n      swap(input, i, pivot_index);\n      history.push(input.slice());\n      operations.push([i, pivot_index]);\n      pivot_index += 1;\n    }\n  }\n\n  swap(input, pivot_index, end);\n  return [pivot_index, history, operations];\n};\n\nconst mergeSort = ary => {\n  var low = 0,\n      high = ary.length - 1;\n  var m = 1;\n  var operations = [];\n  var history = [];\n\n  while (m <= high) {\n    for (var i = low; i <= high; i += 2 * m) {\n      var start = i;\n      var mid = i + m - 1;\n      var end = Math.min(high, i + m + m - 1);\n      var [hist, ops] = merge(ary, start, mid, end);\n      ary = hist.slice();\n      history.push(hist);\n\n      if (m * 2 <= high) {\n        operations.push(ops);\n      } else {\n        operations.push([]);\n      }\n    }\n\n    m *= 2;\n  }\n\n  return [history, operations];\n};\n\nconst merge = (input, start, mid, end) => {\n  var tmp = [];\n  var i = start,\n      j = mid + 1;\n  var operations = Array(end - start + 1).fill(null).map((value, index) => {\n    return index + start;\n  });\n  console.log(operations);\n\n  while (i <= mid && j <= end) {\n    if (input[i] <= input[j]) {\n      tmp.push(input[i]);\n      i += 1;\n    } else {\n      tmp.push(input[j]);\n      j += 1;\n    }\n  }\n\n  while (i <= mid) {\n    tmp.push(input[i]);\n    i += 1;\n  }\n\n  while (j <= end) {\n    tmp.push(input[j]);\n    j += 1;\n  }\n\n  for (var k = start; k <= end; k++) {\n    input[k] = tmp[k - start];\n  }\n\n  return [input, operations];\n};\n\nexport { bubbleSort, selectionSort, insertionSort, quickSort, mergeSort };","map":{"version":3,"sources":["/Users/pingruchou/Desktop/sort_react/sorting/src/sort_algorithm.js"],"names":["bubbleSort","ary","history","operations","i","length","j","tmp","concat","slice","selectionSort","max_","max_idnex","insertionSort","index","k","quickSort","stack","start","end","push","pop","pivot_index","history_","operations_","partition","swap","A","a","b","input","pivot","mergeSort","low","high","m","mid","Math","min","hist","ops","merge","Array","fill","map","value","console","log"],"mappings":"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","sourcesContent":["const bubbleSort = function(ary){\n\tvar history = [];\n\tvar operations = [];\n\tfor(var i = 0; i < ary.length; i++){\n\t\tfor(var j = 0 ; j < ary.length - i - 1; j++){\n\t\t\tif(ary[j] > ary[j+1]){\n\t\t\t\tvar tmp = ary[j+1];\n\t\t\t\tary[j+1] = ary[j];\n\t\t\t\tary[j] = tmp;\n\t\t\t\thistory = history.concat([ary.slice()]);\n\t\t\t\toperations = operations.concat([[j, j+1]]);\n\t\t\t}\n\t\t}\n\t}\n\treturn [history, operations];\n}\n\nconst selectionSort = (ary) => {\n\tvar history = [];\n\tvar operations = [];\n\tvar max_ = -1;\n\tvar max_idnex = -1;\n\tfor(var i = 0; i < ary.length; i++){\n\t\tmax_ = -1;\n\t\tfor(var j = 0 ; j < ary.length - i; j++){\n\t\t\tif(ary[j] > max_){\n\t\t\t\tmax_ = ary[j];\n\t\t\t\tmax_idnex = j;\n\t\t\t}\n\t\t}\n\t\tvar tmp = ary[ary.length - i - 1];\n\t\tary[ary.length - i - 1] = max_;\n\t\tary[max_idnex] = tmp;\n\t\thistory = history.concat([ary.slice()]);\n\t\toperations = operations.concat([[max_idnex, ary.length - i - 1]]);\n\t}\n\treturn [history, operations];\n}\n\nconst insertionSort = (ary) => {\n\tvar history = [];\n\tvar operations = [];\n\tvar index = -1;\n\tfor(var i = 0; i < ary.length; i++){\n\t\tindex = i;\n\t\tvar tmp = ary[i];\n\t\tfor(var j = 0 ; j < i; j++){\n\t\t\tif(ary[j] > ary[i]){\n\t\t\t\tindex = j;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tfor(var k = i; k > index; k--){\n\t\t\tary[k] = ary[k-1];\n\t\t\thistory = history.concat([ary.slice()]);\n\t\t\toperations = operations.concat([[k, i-1]]);\n\t\t}\n\t\tary[index] = tmp;\n\t\thistory = history.concat([ary.slice()]);\n\t\toperations = operations.concat([[index, i]]);\n\t}\n\treturn [history, operations];\n}\n\nconst quickSort = (ary) => {\n\tvar stack = []\n\tvar history = [];\n\tvar operations = [];\n\tvar start = 0, end = ary.length - 1;\n\tstack.push([start, end]);\n\twhile(stack.length > 0){\n\t\t\n\t\t[start, end] = stack.pop();\n\n\t\tvar [pivot_index, history_, operations_] = partition(ary, start, end);\n\t\thistory = history.concat(history_);\n\t\toperations = operations.concat(operations_);\n\t\t\n\t\tif(pivot_index - 1 > start){\n\t\t\tstack.push([start, pivot_index - 1]);\n\t\t}\n\t\tif(pivot_index + 1 < end){\n\t\t\tstack.push([pivot_index+1, end]);\n\t\t}\n\t}\n\treturn [history, operations]\n\n}\n\nconst swap = (A, a, b) =>{\n\tvar tmp = A[a];\n\tA[a] = A[b];\n\tA[b] = tmp;\n}\n\nconst partition = (input, start, end) => {\n\n\tvar pivot = input[end];\n\tvar pivot_index = start;\n\tvar history = [];\n\tvar operations = [];\n\tfor(var i = start; i < end; i++){\n\t\tif(input[i] <= pivot){\n\t\t\tswap(input, i, pivot_index);\n\t\t\thistory.push(input.slice());\n\t\t\toperations.push([i, pivot_index]);\n\t\t\tpivot_index += 1;\n\t\t}\n\t}\n\tswap(input, pivot_index, end);\n\n\treturn [pivot_index, history, operations];\n}\n\nconst mergeSort = (ary) => {\n\n\tvar low = 0, high = ary.length - 1;\n\n\tvar m = 1;\n\tvar operations = [];\n\tvar history = [];\n\n\twhile(m <= high){\n\n\n\t\tfor(var i = low; i <= high; i += 2 * m){\n\t\t\tvar start = i;\n\t\t\tvar mid = i + m - 1;\n\t\t\tvar end = Math.min(high, i + m + m - 1);\n\n\t\t\tvar [hist, ops] = merge(ary, start, mid, end);\n\n\t\t\tary = hist.slice();\n\t\t\thistory.push(hist);\n\t\t\tif(m * 2 <= high){\n\t\t\t\toperations.push(ops);\t\n\t\t\t}else{\n\t\t\t\toperations.push([]);\n\t\t\t}\n\t\t\t\n\t\t}\n\t\tm *= 2;\t\n\t}\n\n\treturn [history, operations];\n\n}\n\nconst merge = (input, start, mid, end) => {\n\n\tvar tmp = [];\n\n\tvar i = start, j = mid + 1;\n\tvar operations = Array(end - start + 1).fill(null).map((value, index)=> {return index + start;});\n\tconsole.log(operations)\n\twhile(i <= mid && j <= end){\n\t\tif(input[i] <= input[j]){\n\t\t\ttmp.push(input[i]);\n\t\t\ti+=1;\n\t\t}else{\n\t\t\ttmp.push(input[j]);\n\t\t\tj+=1;\n\t\t}\n\t}\n\twhile(i <= mid){\n\t\ttmp.push(input[i]);\n\t\ti+=1;\n\t}\n\twhile(j <= end){\n\t\ttmp.push(input[j]);\n\t\tj+=1;\n\t}\n\tfor(var k = start; k <= end; k++){\n\t\tinput[k] = tmp[k - start];\n\t}\n\treturn [input, operations];\n}\n\nexport {bubbleSort, selectionSort, insertionSort, quickSort, mergeSort}\n\n"]},"metadata":{},"sourceType":"module"}