[{"/Users/pingruchou/Desktop/nonStopChou/sortingVisualizer_react/src/index.js":"1","/Users/pingruchou/Desktop/nonStopChou/sortingVisualizer_react/src/sort_algorithm.js":"2"},{"size":5216,"mtime":1634656459149,"results":"3","hashOfConfig":"4"},{"size":3616,"mtime":1634655083499,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"8"},"3uxj6b",{"filePath":"9","messages":"10","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/pingruchou/Desktop/nonStopChou/sortingVisualizer_react/src/index.js",["11","12"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport styled from 'styled-components';\nimport {bubbleSort, selectionSort, insertionSort, quickSort, mergeSort} from './sort_algorithm.js'\n\nconst animationSpeed = 25;\nconst datas = 100;\nconst bar_colors = ['green', 'reed', 'orange', 'yellow', 'purple', 'gray']\nclass Line extends React.Component {\n\t\n\tconstructor(props){\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tisHover:false,\n\t\t\tstyle:{\n\t\t\t\tleft:this.props.position,\n\t\t\t\tborderColor:this.props.color,\n\t\t\t\ttop: 600 - parseInt(this.props.value),\n\t\t\t}\n\t\t}\n\t}\n\n\n\thandleMouseOver = () => {\n\t\tthis.setState({\n\t\t\tisHover:true,\n\t\t})\n\t\tconst obj = document.getElementById('item_value')\n\t\tobj.innerHTML = this.props.value;\n\t\tthis.setState({style:{...this.state.style, borderColor:\"#2894FF\"}});\n\t}\n\n\thandleMouseOut = () => {\n\t\tthis.setState({\n\t\t\tisHover:false,\n\t\t})\n\t\tconst obj = document.getElementById('item_value')\n\t\tobj.innerHTML = \"\";\n\t\tthis.setState({style:{...this.state.style, borderColor:this.props.color}});\n\t}\n\trender(){\n\t\treturn (\n\t\t\t<div className='vl' style={this.state.style} onMouseOver={this.handleMouseOver} onMouseOut={this.handleMouseOut}></div>\n\t\t)\n\t}\t\n\t\n\n\n}\n\nclass SortVisualizer extends React.Component{\n\t\n\tconstructor(props){\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tlines : null,\n\t\t\thistory : [],\n\t\t\toperations:[],\n\t\t\tisSetUp:false,\n\t\t\tcounter:0,\n\t\t\tcurrentStep:-1,\n\t\t\tisRunning : false,\n\t\t\tselection: \"Bubble_Sort\",\n\n\t\t}\n\t\tdocument.body.style = 'background-color : #4F4F4F';\n\t}\n\n\tselectionChange = () => {\n\t\tconst selection = document.getElementById('algorithm').value;\n\t\tthis.setState({selection: selection});\n\t}\n\n\trandomInput = () => {\n\t\tif(!this.state.isRunning){\n\t\t\tconsole.log(this.state.isRunning);\n\t\t\tvar input = [Array.from({length:datas}, () => Math.floor(Math.random() * 400))];\n\t\t\tvar counter = this.state.counter;\n\t\t\tthis.setState({history:input, counter:counter+1, currentStep:0});\n\t\t}\n\t}\n\n\tanimate = (inputs) => {\n\t\tconst [history, operations] = inputs;\n\t\tthis.setState({history:history, operations:operations}, ()=>{\n\t\t\tfor(let i = 0 ; i < history.length ; i++){\n\t\t\t\tsetTimeout(()=>{\n\t\t\t\t\tthis.setState({currentStep:i});\n\t\t\t\t}, animationSpeed * i);\n\t\t\t}\n\t\t\tsetTimeout(()=>{\n\t\t\t\tthis.setState({isRunning:false});\n\t\t\t}, animationSpeed * history.length);\n\t\t});\n\t}\n\n\tvisualize = () => {\n\t\tif(!this.state.isRunning){\n\t\t\tthis.setState({currentStep:0, isRunning:true});\n\t\t\t\n\t\t\tlet returnValue = null;\n\t\t\tconst input_array = this.state.history.slice(0, 1)[0];\n\t\t\t\n\t\t\tswitch(this.state.selection){\n\t\t\t\tcase \"Bubble_Sort\":\n\t\t\t\t\treturnValue = bubbleSort(input_array);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'Selection_Sort':\n\t\t\t\t\treturnValue = selectionSort(input_array);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'Insertion_Sort':\n\t\t\t\t\treturnValue = insertionSort(input_array);;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'Quick_Sort':\n\t\t\t\t\treturnValue = quickSort(input_array);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'Merge_Sort':\n\t\t\t\t\treturnValue = mergeSort(input_array);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tthis.animate(returnValue);\n\t\t}\n\t}\n\n\trender(){\n\t\tvar lines = null;\n\t\tif(this.state.currentStep !== -1){\n\t\t\tconst input = this.state.history[this.state.currentStep];\n\t\t\tconst operations = this.state.operations[this.state.currentStep];\n\t\t\tlines = input.map((value, index) => {\n\t\t\t\t\t\tlet percentage = 100 / (input.length + 1) * index;\n\t\t\t\t\t\tpercentage = percentage.toString() + \"%\";\n\t\t\t\t\t\t\n\t\t\t\t\t\tlet key = this.state.counter.toString() + '_' +this.state.currentStep.toString() + '_' + index.toString();\n\t\t\t\t\t\t\n\t\t\t\t\t\t// let color = \"#FFD2D2\";\t\n\t\t\t\t\t\tlet color = bar_colors[index % 6];\n\n\t\t\t\t\t\tif(this.state.isRunning){\n\t\t\t\t\t\t\tif(operations.includes(index)){\n\t\t\t\t\t\t\t\tcolor = \"black\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<Line key={key} position={percentage} color={color} value={value}/>\n\t\t\t\t\t\t);\t\n\t\t\t\t\t});\n\t\t}\n\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<nav className=\"bg-secondary navbar navbar-expand-lg p-4\">\n\t\t\t\t\t<div className=\"collapse navbar-collapse\">\n\t\t\t\t\t\t\t<ul className=\"navbar-nav\">\n\t\t\t\t\t\t\t\t\t<li className=\"nav-item mx-4 pt-2\">\n\t\t\t\t\t\t\t\t\t\t<select id='algorithm' onChange={()=>{this.selectionChange()}}>\n\t\t\t\t\t\t\t\t\t\t\t<option className=\"nav-link text-white\" value=\"Bubble_Sort\">Bubble Sort</option>\n\t\t\t\t\t\t\t\t\t\t\t<option className=\"nav-link text-white\" value=\"Insertion_Sort\">Insertion Sort</option>\n\t\t\t\t\t\t\t\t\t\t\t<option className=\"nav-link text-white\" value=\"Selection_Sort\">Selection Sort</option>\n\t\t\t\t\t\t\t\t\t\t\t<option className=\"nav-link text-white\" value=\"Quick_Sort\">Quick Sort</option>\n\t\t\t\t\t\t\t\t\t\t\t<option className=\"nav-link text-white\" value=\"Merge_Sort\">Merge Sort</option>\n\t\t\t\t\t\t\t\t\t\t</select>\n\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t\t<li className=\"nav-item\">\n\t\t\t\t\t\t\t\t\t\t<button id=\"random\" onClick={() => this.randomInput()}>Randomize Input</button>\n\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t\t<li className=\"nav-item\">\n\t\t\t\t\t\t\t\t\t\t<button id=\"visual\" onClick={() => this.visualize()}>Visualize</button>\n\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t</ul>\n\n\t\t\t\t\t</div>\n\t\t\t\t</nav>\n\t\t\t\t\n\t\t\t\t<div className=\"boundary\">\n\t\t\t\t\t<label>Selection Item Value : <label id='item_value' style={{color:'White'}}></label></label>\n\t\t\t\t\t<li className=\"nav-link\" >\n\t\t\t\t\t\t{lines}\n\t\t\t\t\t</li>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n\n}\n\n\nReactDOM.render(\n\t<SortVisualizer />,\n\tdocument.getElementById('root'),\n);\n\n\n","/Users/pingruchou/Desktop/nonStopChou/sortingVisualizer_react/src/sort_algorithm.js",[],{"ruleId":"13","severity":1,"message":"14","line":5,"column":8,"nodeType":"15","messageId":"16","endLine":5,"endColumn":14},{"ruleId":"17","severity":1,"message":"18","line":106,"column":4,"nodeType":"19","messageId":"20","endLine":122,"endColumn":5},"no-unused-vars","'styled' is defined but never used.","Identifier","unusedVar","default-case","Expected a default case.","SwitchStatement","missingDefaultCase"]